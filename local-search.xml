<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>如何打造自己的專業形象</title>
    <link href="/2025/01/01/%E5%A6%82%E4%BD%95%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%B0%88%E6%A5%AD%E5%BD%A2%E8%B1%A1/"/>
    <url>/2025/01/01/%E5%A6%82%E4%BD%95%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%B0%88%E6%A5%AD%E5%BD%A2%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>嗨，你是否跟我一樣，明明覺得自己工作做了很多事，天天被使喚來使喚去，明明做了不少事，但事到臨頭卻沒有辦法明確地寫出自己做了什麼？甚至有時候還開始懷疑起自己到底為什麼看起來不如他人來得優異？<br>當然，也是有可能你我做的事真的沒什麼了不起，是那種無關緊要緊要的事也說不定。但因為我的個性天生有點自卑，有時很容易被貶低自己的努力與付出，接著就進入負面的螺旋：努力-&gt;自貶-&gt;努力-&gt;自貶。<br>因此在2025年，我希望可以有一個明確的方式來認識自己。試著使用大眾的標準作為框架來定義自己的行為，當然我極力否認任何人被框架束縛，但作為評斷、參考用的標準來說，我想還是能為自己帶來點靈感與成長。<br>我所選的評斷標準，是Amazon Leadership Principle，又稱Amazon領導力準則。</p><h3 id="Amazon-Leadership-Principle-是什麼？"><a href="#Amazon-Leadership-Principle-是什麼？" class="headerlink" title="Amazon Leadership Principle 是什麼？"></a>Amazon Leadership Principle 是什麼？</h3><p>這是源自Amazon創辦人所提出的，共有14項的領導準則。這是用來告訴所有Amazon的員工，以及那些想要進入Amazon的應徵者們，Amazon所追求的員工形象，這十四項分別是：</p><ol><li>顧客至上 (Customer obsession) 努力工作，贏得客戶對他們的信任，<strong>以顧客優先</strong>。</li><li>主人翁精神 (Ownership) <strong>長遠考慮，不因短期業績犧牲長期價值</strong>，認為自己代表了公司，遇事不會說<strong>那不是我的工作</strong>“</li><li>創新與簡化 (Invent and simplify) <strong>不斷追求創新與發明</strong>、了解外界動態，尋求<strong>使工作簡易化的方法</strong></li><li>決策正確 (Right,a lot) <strong>做出正確決定</strong>，透過了解多樣視角，挑戰刻板印象</li><li>好奇求知 (Learn and be curious) <strong>終身學習</strong>者，<strong>對可能性充滿好奇並付諸行動加以探索</strong></li><li>選賢與能 (Hire and develop the best) 表彰傑出人才，磨練他們，從員工角度出發。</li><li>最高標準 (Insist on the highest standards) 有<strong>高標準</strong>，<strong>確保任何問題不會蔓延</strong>，<strong>得以及時徹底解決並確保不再出現</strong></li><li>胸懷大志 (Think big) 從<strong>不同角度考慮問題，廣泛尋找服務客戶的方法</strong>，進而激發出良好的成果。</li><li>崇尚行動 (Bias for action) 決策與行動是可以調整的，<strong>鼓勵在深思熟慮的前提下冒險</strong></li><li>勤儉節約 (Frugality) 以<strong>更少的投入換來更大的產出</strong></li><li>贏得信任 (Earn trust) <strong>專注傾聽 坦誠溝通 尊重他人 感於自我批評</strong> 以最佳領導者標準要求自己與其團隊</li><li>追根究柢 (Dive deep) <strong>深入各環節，掌控細節，經常自我審核，不遺漏任何工作</strong></li><li>批判與承諾 (Have backbone; disagree and commit) <strong>勇於質疑</strong>他們無法認同的決策，一旦做出決定，就全心全意致力於實現目標</li><li>達成業績 (Deliver results) 即使<strong>碰到困難也</strong>確保工作品質並執行完成。</li></ol><p>我是參考這份文章做出以下整理的，有興趣的朋友也有可以看看它：<a href="https://hsinchengchao.medium.com/%E7%BE%8E%E5%9C%8B%E6%B1%82%E8%81%B7%E5%BF%83%E5%BE%97%E5%88%86%E4%BA%AB-%E5%85%AD-fb9c73ff995c">https://hsinchengchao.medium.com/%E7%BE%8E%E5%9C%8B%E6%B1%82%E8%81%B7%E5%BF%83%E5%BE%97%E5%88%86%E4%BA%AB-%E5%85%AD-fb9c73ff995c</a></p><h4 id="用處"><a href="#用處" class="headerlink" title="用處"></a>用處</h4><p>透過這14項的整理，是用來讓我自己去思考，自己日常的舉止是否有符合該行為的指標，順帶思考是否可以整理出一個STAR來描述自己，透過實際案例與成果，讓自己的價值可以更好展現給聆聽者。<br>對於內向的我來說這不容易，我正在學習中，當作是今天的新年新希望做，希望今年能夠一帆風順。</p>]]></content>
    
    
    <categories>
      
      <category>Chat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Resume</tag>
      
      <tag>Personality</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linkedin-人資怎麼看你？</title>
    <link href="/2024/12/30/Linkedin-%E4%BA%BA%E8%B3%87%E6%80%8E%E9%BA%BC%E7%9C%8B%E4%BD%A0%EF%BC%9F/"/>
    <url>/2024/12/30/Linkedin-%E4%BA%BA%E8%B3%87%E6%80%8E%E9%BA%BC%E7%9C%8B%E4%BD%A0%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="獵頭怎麼找到你？"><a href="#獵頭怎麼找到你？" class="headerlink" title="獵頭怎麼找到你？"></a>獵頭怎麼找到你？</h3><p>前一陣子參加了年底的<GDG Taipei>，突然有看到A開頭的獵頭公司開Linkedin講座，覺得有興趣就去聽聽看，意外的是還真的知道了一些平常不會知道的事<br>當然也可能是我涉世不深，懂得還不多，大概整理了一些東西，也歡迎分享與交流：</p><ul><li>獵頭在找尋人才時，通常都是使用Linkedin為招募者提供的後台進行搜尋。搜尋條件就主要是學經歷等等…</li><li>獵頭通常在找人才時，面對雇主的需求，經常用以下順位去找：<ul><li>Location 地點，在個人資訊頁面填入的地點會被納入人資的搜尋條件中。</li><li>Skill 技能，如果有經驗的技能，盡量放在技能欄位，好讓自己被發現。(A社獵頭表示軟體工程師不必寫軟實力)</li><li>Company 任職公司，有些公司會要求從XX公司來的人，這時公司就很重要了</li><li>KeyWords 關鍵字</li></ul></li><li>Linkedin後台，針對市場上的人才，會粗略分成三種類型，HR找人從上往下找：<ul><li>OPEN TO WORK 這是Linkedin可以開啟的狀態，求職者開啟表示主動找尋工作，同時可以限制為只有招募專員才可見。</li><li>ACTIVE TALENT 這是Linkedin用演算法分類的狀態，可以理解為活躍用戶的標籤，若是想要被分類到這一塊，要考慮：<ul><li>多多參與貼文回應</li><li>近期更新過Linkedin Profile</li></ul></li><li>REDISCOVERED CANDIDATES 非活躍用戶</li></ul></li></ul><h3 id="Linkedin-Profile-怎麼建？"><a href="#Linkedin-Profile-怎麼建？" class="headerlink" title="Linkedin Profile 怎麼建？"></a>Linkedin Profile 怎麼建？</h3><p>大致Linkedin Profile有這五個部分</p><ol><li>HeadLines&amp;Location</li><li>Experience</li><li>Skills&amp;Certification</li><li>About</li><li>Project</li></ol><p>A社獵頭表示，通常前三個符合，他們就會找你了。</p><p>有關HeadLines的寫法，可參考範例：<br><img src="/img/linkedin_headlines.png"><br>Experience的寫法，可參考範例：<br><img src="/img/linkedin_experience.png"><br>撰寫經歷要注意：</p><ul><li>至少要有三個bullet points</li><li>介紹自己使用的技術</li><li>其他關鍵字(領域、你開發什麼樣的系統等等)</li><li>量化描述成果</li></ul><p>About的寫法A社獵頭建議不要太長，約在10以內最好，如果沒想法可以參考範例：<br><img src="/img/linkedin_about.png"></p><p>其他雜圖<br><img src="/img/linkedin_extra1.png"><br><img src="/img/linkedin_extra2.png"></p><p>大約就是這樣，這篇文章沒有什麼可以讓人醍醐灌頂的內容，寫完的我可以保證，大多內容還是些老生常談，最多就能帶來一點方向性指導。<br>就這樣，祝各位求職順利。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linkedin</tag>
      
      <tag>Head Hunter</tag>
      
      <tag>Resume</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Clean-Code-筆記-2</title>
    <link href="/2024/12/29/Clean-Code-%E7%AD%86%E8%A8%98-2/"/>
    <url>/2024/12/29/Clean-Code-%E7%AD%86%E8%A8%98-2/</url>
    
    <content type="html"><![CDATA[<p>本次是繼續上回的Clean Code筆記，廢話不多說，Let’s us begin.</p><h2 id="TDD"><a href="#TDD" class="headerlink" title="TDD"></a>TDD</h2><h4 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h4><ol><li>撰寫一個單元測試前不應該撰寫產品程式碼</li><li>只撰寫剛好能通過的產品程式碼</li><li>只撰寫剛好能通過當前測試失敗的產品程式碼</li></ol><h4 id="注意要點"><a href="#注意要點" class="headerlink" title="注意要點"></a>注意要點</h4><ul><li>撰寫測試的好處可以讓你更動程式碼時不那麼恐懼， 需要注意的是，測試程式碼同樣需要與時俱進，若沒有跟著調整容易造成程式碼的腐敗，最終測試程式碼的品質同樣影響產品程式碼。</li><li>測試程式碼要求的是可讀性 闡明性(Clarity)，而不是效能。</li><li>盡量維持一個測試一個斷言(Assert)，讓一個測試只會顯示一個結果，方便開發者評估功能。(一個測試只測試一個概念)</li></ul><h4 id="TDD-FIRST原則"><a href="#TDD-FIRST原則" class="headerlink" title="TDD FIRST原則"></a>TDD FIRST原則</h4><ul><li>Fast 測試應該要夠快</li><li>Independent 測試應該要能夠獨立運行，不依賴其他測試程式</li><li>Repeatable 測試應該要能夠重複使用</li><li>Self-Validating 測試應該要能夠自我驗證，顯示要測試的概念是否成功運作</li><li>Timely 要在產品程式之前被撰寫，若是之後才撰寫，經常會發現撰寫出來的產品程式碼並不好被測試</li></ul><h2 id="Class-Level"><a href="#Class-Level" class="headerlink" title="Class-Level"></a>Class-Level</h2><h4 id="單一職責原則-Single-Responsibility-Principle-SRP"><a href="#單一職責原則-Single-Responsibility-Principle-SRP" class="headerlink" title="單一職責原則(Single Responsibility Principle, SRP)"></a>單一職責原則(Single Responsibility Principle, SRP)</h4><p>單一職責原則主張，一個類別或一個模組應該只能有一個，而且只能有一個被修改的理由。<br>個人對這段的理解是，一個類別的職責應該是很明確的，他只該負責一件事，而需要修改類別的原因，<br>必須得是當初認為要做的那件事。 比方說有一個專門處理報表Excel輸出的類別ExcelObject，若今天需要做輸出Excel之外的事 ，比方說：判斷格式、字串拼接、欄位驗證、給定預設值，若因為這些理由而修改了ExcelObject，就是違反了SRP。</p><h4 id="凝聚力"><a href="#凝聚力" class="headerlink" title="凝聚力"></a>凝聚力</h4><p>類別中的方法，盡量讓每個變數都被使用在每一個方法中。<br>當類別失去凝聚力時，就應該將它拆開</p><h4 id="開放閉合原則-Open-Closed-Principle"><a href="#開放閉合原則-Open-Closed-Principle" class="headerlink" title="開放閉合原則(Open-Closed Principle)"></a>開放閉合原則(Open-Closed Principle)</h4><p>類別應該要對擴充具備開放性，但對修改具有閉合性。</p><h4 id="隔離修改"><a href="#隔離修改" class="headerlink" title="隔離修改"></a>隔離修改</h4><p>類別之間不應該實體依賴，而是依賴抽象，透過一層抽象隔離變化，責任分明且易於測試。</p><h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><h4 id="依賴注入-Dependency-Injection-DI"><a href="#依賴注入-Dependency-Injection-DI" class="headerlink" title="依賴注入(Dependency Injection, DI)"></a>依賴注入(Dependency Injection, DI)</h4><p>將物件的建立過程從使用中分離出來，這是控制反轉(Inversion of Control, IOC)在相依性管理裡的一種應用手段。控制反轉是將某個物件的第二個職責，移至其他專注於該職責的物件裡，也因此支援了SRP原則。<br>在相依性管理的範疇中，一個物件不應該負責實體化對本身的相依。而是將責任交給外部。建議可以透過抽象工廠進行。</p><h4 id="抽象工廠-Abstract-Factory-Example"><a href="#抽象工廠-Abstract-Factory-Example" class="headerlink" title="抽象工廠(Abstract Factory) Example"></a>抽象工廠(Abstract Factory) Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象產品：Button</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Button</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 抽象產品：TextBox</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">TextBox</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具體產品：WindowsButton</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WindowsButton</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Button</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Rendering a Windows-style Button&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具體產品：WindowsTextBox</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WindowsTextBox</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TextBox</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Rendering a Windows-style TextBox&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具體產品：MacOSButton</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MacOSButton</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Button</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Rendering a MacOS-style Button&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具體產品：MacOSTextBox</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MacOSTextBox</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TextBox</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Rendering a MacOS-style TextBox&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 抽象工廠：UIFactory</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">UIFactory</span> &#123;<br>    Button <span class="hljs-title function_">createButton</span><span class="hljs-params">()</span>;<br>    TextBox <span class="hljs-title function_">createTextBox</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具體工廠：WindowsFactory</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WindowsFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UIFactory</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Button <span class="hljs-title function_">createButton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowsButton</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> TextBox <span class="hljs-title function_">createTextBox</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowsTextBox</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具體工廠：MacOSFactory</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MacOSFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UIFactory</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Button <span class="hljs-title function_">createButton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MacOSButton</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> TextBox <span class="hljs-title function_">createTextBox</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MacOSTextBox</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 客戶端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractFactoryExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 客戶端選擇一個工廠</span><br>        <span class="hljs-type">UIFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> getFactory(<span class="hljs-string">&quot;Windows&quot;</span>); <span class="hljs-comment">// 可切換為 &quot;MacOS&quot;</span><br><br>        <span class="hljs-comment">// 使用工廠創建產品</span><br>        <span class="hljs-type">Button</span> <span class="hljs-variable">button</span> <span class="hljs-operator">=</span> factory.createButton();<br>        <span class="hljs-type">TextBox</span> <span class="hljs-variable">textBox</span> <span class="hljs-operator">=</span> factory.createTextBox();<br><br>        <span class="hljs-comment">// 渲染產品</span><br>        button.render();<br>        textBox.render();<br>    &#125;<br><br>    <span class="hljs-comment">// 工廠選擇邏輯</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> UIFactory <span class="hljs-title function_">getFactory</span><span class="hljs-params">(String osType)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">switch</span> (osType) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Windows&quot;</span> -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowsFactory</span>();<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;MacOS&quot;</span> -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">MacOSFactory</span>();<br>            <span class="hljs-keyword">default</span> -&gt; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Unknown OS type&quot;</span>);<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>▲ 這樣的設計可以靈活切換不同風格的 UI，且對於新的 UI 主題（如 Linux），只需添加新的工廠和產品類即可，無需修改現有代碼。</p><h3 id="橫切關注點"><a href="#橫切關注點" class="headerlink" title="橫切關注點"></a>橫切關注點</h3><p>假設我們有一個交易系統，流程如下：</p><ol><li>登入-&gt; 身分驗證  -&gt; 付款</li><li>登入-&gt; 身分驗證  -&gt; 退款</li></ol><p>嘗試以這樣的角度去理解系統的流程，你會發現「登入」與「身分驗證」並不是真正核心的功能，且兩者重複存在。為了使我們可以更專注在真正重要的商業流程上，我們可以將那些次要的細節作為一個個切片(Aspects)從主流程切割出來，這一個步驟我們稱之為關注點分離。<br>而實現這樣的構想的技術就是Java Proxy機制，或是AOP(又名切面導向編程)。<br>關於AOP，可以參考我的另一篇文章：<a href="https://medium.com/@ziegler7359/spring-boot-aop-%E5%AD%B8%E7%BF%92%E5%BF%83%E5%BE%97-392e2b83cd54">Spring AOP</a></p><p>大約整理到這邊，後面Clean Code的相關討論幾乎都是案例題目了，這邊就不拿出來討論了。</p>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Clean Code</tag>
      
      <tag>Java</tag>
      
      <tag>Programming</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Remark Page</title>
    <link href="/2024/12/28/hello-world/"/>
    <url>/2024/12/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Hexo 模板 資訊參考：<a href="https://hexo.fluid-dev.com/docs/guide/#%E9%85%8D%E7%BD%AE">https://hexo.fluid-dev.com/docs/guide/#%E9%85%8D%E7%BD%AE</a><br>如何更換Hexo主題 參考文件：<a href="https://s81679.github.io/2020/02/09/change-themes/">https://s81679.github.io/2020/02/09/change-themes/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>memo</tag>
      
      <tag>usage</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Clean Code 筆記(1)</title>
    <link href="/2024/12/26/Clean-Code-%E7%AD%86%E8%A8%98-1/"/>
    <url>/2024/12/26/Clean-Code-%E7%AD%86%E8%A8%98-1/</url>
    
    <content type="html"><![CDATA[<p>Clean Code的原則包含了多種面向，透過Clean Code的學習，可以使你全方位的檢視自己撰寫與他人撰寫的程式碼是否足夠整潔。<br>以下為自己整理的Clean Code學習筆記：</p><h3 id="變數"><a href="#變數" class="headerlink" title="變數"></a>變數</h3><p>好的變數命名應該要能夠名副其實，比方說：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> day;<br></code></pre></td></tr></table></figure><p>永遠比</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> expireDate;<br></code></pre></td></tr></table></figure><p>要來得糟。</p><hr><ul><li>避免使用 <em>O</em> <em>0</em> <em>I</em> <em>L</em> 這些容易誤導、寫錯的字元</li><li>使用能唸出來的名稱，<em>團隊溝通會使用到</em></li><li>使用可被搜尋到的名字 <em>除錯時會使用到</em></li><li>介面與繼承，可使用 Student、StudentImpl作為命名</li><li>命名應該直觀，符合開發人員的想像</li><li>類別應以名詞命名、方法應以動詞命名</li></ul><hr><h3 id="函式"><a href="#函式" class="headerlink" title="函式"></a>函式</h3><p>設計原則</p><ul><li>讓函式只做一件事，SRP。</li><li>參數的數量越少越好，方便開發者了解參數對整理輸出的影響</li><li>不要帶boolean進function，違背了SRP。</li><li>如果要傳入多個參數，用物件包裝會更好，至少符合相同概念。</li><li>輸入與指令分離，ex:判斷條件與操作物件是兩個不同層級的概念，不要放在一起</li><li>不要有副作用，避免不可預料的BUG發生</li><li>以try catch 取代if 判斷，減少巢狀迴圈。</li></ul><hr><h3 id="物件與資料結構"><a href="#物件與資料結構" class="headerlink" title="物件與資料結構"></a>物件與資料結構</h3><ol><li><p>抽象化設計界面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">FuelTankCapacityInGallons();<br><span class="hljs-type">double</span> <span class="hljs-title function_">getGallonsOfGasoline</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Vehicle</span> &#123;<br>    <span class="hljs-type">double</span> <span class="hljs-title function_">getPercentFuelRemaining</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>採用後者的設計方式可以隱藏資料的細節。</p></li><li><p>資料結構的程式碼</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NPC</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">talk</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-keyword">if</span> (object <span class="hljs-keyword">instanceof</span> Merchant) &#123;<br>            <span class="hljs-comment">// do something</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (object <span class="hljs-keyword">instanceof</span> Smith) &#123;<br>            <span class="hljs-comment">// do something</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><ul><li>在NPC類別中，要擴充一個新的類別很麻煩，必須要更動所有原先相關的程式碼，以符合函式的架構</li><li>在NPC類別中，新增新的方法很容易，不需更動既有程式碼</li><li></li></ul><ol start="2"><li>物件導向的程式碼<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Merchant</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NPC</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">talk</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// do something</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Smith</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NPC</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">talk</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// do something</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">NPC</span> &#123;<br>    talk();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><ul><li>在NPC類別中，要寫一個新的類別很容易，不需更動既有程式碼</li><li>在NPC類別中，新增新的方法很麻煩，必須要更動每一個繼承NPC的類別</li></ul><h3 id="例外處理"><a href="#例外處理" class="headerlink" title="例外處理"></a>例外處理</h3><ul><li>視情況，選擇封裝Exception</li><li>不要傳遞Null</li></ul><p>節錄<Clean Code> Ch1~Ch8</p>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Clean Code</tag>
      
      <tag>Java</tag>
      
      <tag>Programming</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 常用指令與說明</title>
    <link href="/2024/12/24/Git-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E8%88%87%E8%AA%AA%E6%98%8E/"/>
    <url>/2024/12/24/Git-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E8%88%87%E8%AA%AA%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<p>我們常用的指令有很多，對資訊科技的學生來說，Git的使用已經是基礎了，更何況是一名資訊工作者。本次是要整理那些常用的指令，以及針對一些細節去做釐清學習。<br>常用的指令整理如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init #初始化Git Repo<br>git status #查看 Git 目錄更動狀態<br>git log # 查看commit紀錄<br>git add  # 將tracked的資料，添加到add區域<br>git commit # 將add區域的資料，提交一筆紀錄<br>git push # 把本地的commit提交至遠端伺服器<br>git reset -soft # 用來拆commit用的 會把HEAD重製到指定位置<br>git reset -mixed # 用來拆commit用的 除了把HEAD重製到指定位置，還會把資料變成untracked狀態<br>git reset -hard # 最少用，重製到指定位置，並刪除之前位置到重製點之前的commit，危險!<br>git checkout: 用來切換分支或恢復檔案，切換到分支時，使HEAD 指向該分支。<br>git merge: 將另一個分支的更改合併到當前分支中，會產生合併提交。<br>git rebase: 用來將一個分支的提交移到另一個分支上，通常用來保持提交歷史簡潔，可以取代 git merge 的方式。<br>git branch: 列出、創建或刪除分支。<br></code></pre></td></tr></table></figure><h4 id="Detach-HEAD-表示當前不在任何分支上，HEAD-直接指向某個提交，通常需要使用-git-checkout-返回分支。"><a href="#Detach-HEAD-表示當前不在任何分支上，HEAD-直接指向某個提交，通常需要使用-git-checkout-返回分支。" class="headerlink" title="Detach HEAD: 表示當前不在任何分支上，HEAD 直接指向某個提交，通常需要使用 git checkout 返回分支。"></a>Detach HEAD: 表示當前不在任何分支上，HEAD 直接指向某個提交，通常需要使用 git checkout 返回分支。</h4><h4 id="Fast-forward-當目標分支可以直接向前推進而不需要合併提交，會自動進行快進合併，保留簡潔的歷史。"><a href="#Fast-forward-當目標分支可以直接向前推進而不需要合併提交，會自動進行快進合併，保留簡潔的歷史。" class="headerlink" title="Fast-forward: 當目標分支可以直接向前推進而不需要合併提交，會自動進行快進合併，保留簡潔的歷史。"></a>Fast-forward: 當目標分支可以直接向前推進而不需要合併提交，會自動進行快進合併，保留簡潔的歷史。</h4><p>大致整理到這邊，後來其實我越來越少用了，主要是IDE內建Git功能很多都比Git Bash shell 的更易於使用了，也有更便捷的一些做法，所以以上僅作個人紀錄之用。</p>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什麼樣的程式碼需要被重構？</title>
    <link href="/2024/12/23/%E4%BB%80%E9%BA%BC%E6%A8%A3%E7%9A%84%E7%A8%8B%E5%BC%8F%E7%A2%BC%E9%9C%80%E8%A6%81%E8%A2%AB%E9%87%8D%E6%A7%8B%EF%BC%9F/"/>
    <url>/2024/12/23/%E4%BB%80%E9%BA%BC%E6%A8%A3%E7%9A%84%E7%A8%8B%E5%BC%8F%E7%A2%BC%E9%9C%80%E8%A6%81%E8%A2%AB%E9%87%8D%E6%A7%8B%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>什麼樣的程式碼需要被重構？</p><p>還記得當我在找第一份後端工作時，曾經有被面試官問到有沒有過重構的經驗？當時的我菜得一批，連重構是什麼都講不出來，最後只吞吞吐吐地說自己沒有重構的經驗。後來，受到教訓的我讓自己慢慢去了解重構之後，才慢慢發現「重構」並不是什麼高大上的名詞，有時甚至你還沒聽過這個名詞時，就已經在重構之中了。<br>重構──意指在不影響程式碼功能的情況下，進行程式碼的效能、可讀性、可維護性等等進行調整的行為。小到修正命名不良的變數名稱，大到套用設計模式，調整系統的架構 ( 但前提是功能不受影響 )，這些都可以算是重構。<br>重構──那些變數、方法等級的重構，其實都不算太難。通常會讓人困惑的點更多是在於，我不確定這段程式碼需不需要被重構。假設有一段關於交易的程式碼，中間有超過100行的驗證程式碼，你可能直覺性地覺得應該要提取出來作為一個獨立的方法。但團隊的其他人也許早就習慣了這樣寫，這樣一來，是否真的能夠幫助到其他人理解這段程式碼？<br>這說明了其實很多標準最終你依然得Align自己的開發團隊，而非盲目遵從某些標準或規範。當然能夠判斷出哪部分的程式碼暴露了不必要的細節這點，也需要一些經驗。<br>對於這種模糊不清的感覺，有些人可以無師自通，抓出合理的平衡點。如果不是，我會推薦看Kent Beck的《測試驅動開發》，裡面詳細地描述了如何從一個肥胖的程式碼不斷調整，透過大量的測試，一步步將物件的依賴分離與凝聚力的提升。雖然TDD的開發流程是否適合開發團隊使用是個好問題。但做為學習重構程式碼的第一站來說，我還是認為說《測試驅動開發》會很適合初出茅廬的工程師。<br>此外，對於重構程式碼這件事，TDD還提到一個我認為最重要的觀念。「首先必須要有完善、覆蓋率高的測試程式碼，不然就只是在重寫而已」</p>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Refactor</tag>
      
      <tag>心得</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用Github Page + Hexo + Vercel 建立你的部落格</title>
    <link href="/2024/12/22/%E7%94%A8Github-Page-Hexo-Vercel-%E5%BB%BA%E7%AB%8B%E4%BD%A0%E7%9A%84%E9%83%A8%E8%90%BD%E6%A0%BC/"/>
    <url>/2024/12/22/%E7%94%A8Github-Page-Hexo-Vercel-%E5%BB%BA%E7%AB%8B%E4%BD%A0%E7%9A%84%E9%83%A8%E8%90%BD%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<p>作為一名開發者，Github已經是每天都無法脫離的工具，除此之外，Github Page也是許多新手工程師的好朋友，使用簡單的指令就可以讓新手工程師建立一個屬於自己的部落格，以下就是簡單介紹要怎麼搭建一個自己的Github Blog<br>我們主要使用Hexo作為框架，他主要以Node.js作為編譯工具。</p><h3 id="環境安裝"><a href="#環境安裝" class="headerlink" title="環境安裝"></a>環境安裝</h3><ol><li>Git(<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a>) 版本控制工具</li><li>Node.js(<a href="https://nodejs.org/zh-tw">https://nodejs.org/zh-tw</a>) 執行Hexo框架必備Node.js的套件管理工具。</li></ol><p>安裝完後，打開CMD，輸入 “node -v” 與 “git -v” 看看兩者是不是都有安裝成功，有的話就繼續下去。</p><h1 id="步驟解說"><a href="#步驟解說" class="headerlink" title="步驟解說"></a>步驟解說</h1><h4 id="本機設定"><a href="#本機設定" class="headerlink" title="本機設定"></a>本機設定</h4><ol><li>建立你的工作資料夾。</li><li>在你建立的工作資料夾目錄下，點選右鍵 “Open Git Bash”，開啟Git cmd</li><li>安裝Hexo 輸入”npm install -g hexo-cli” npm 是 node.js的套件管理工具，-g 代表在資料夾外也可以使用(global)，hexo-cli是我們要安裝的node.js套件</li><li>安裝完後輸入”hexo -v” 確認hexo 是否有成功安裝，成功的話繼續。</li><li>在你的工作目錄下初始化hexo資訊 CMD輸入”hexo init” 與 “npm install”</li><li>安裝完後輸入 “hexo s” 啟用hexo運作的伺服器範例</li><li>你應該會看到訊息 “Hexo is running at port 4000”，這時可以開啟URL確認看看。</li></ol><p>這樣一來基本的安裝就完成了！</p><h4 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h4><ol><li>註冊Github</li><li>以”你的名字.github.io”建立Repository。</li></ol><h4 id="部署至GithubPage"><a href="#部署至GithubPage" class="headerlink" title="部署至GithubPage"></a>部署至GithubPage</h4><ol><li>在Hexo工作資料夾下安裝套件 “npm install hexo-deployer-git –save”</li><li>打開_config.yml文件，修改以下設定<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">type:</span> git<br><span class="hljs-symbol">repository:</span> &lt;你的GithubPage路徑&gt;<br><span class="hljs-symbol">branch:</span> &lt;你要推的分支&gt;<br></code></pre></td></tr></table></figure>修改完後，我們要重新打包，在cmd 輸入 “hexo g” 產生靜態文件。<br>接著輸入 “hexo d”，把你的Hexo Page推到Github上。<br>接著打開你的Repository，並觀察Actions中，是否WorkFlow成功執行完。如果正常結束，那恭喜你，你已經完成了。</li></ol><p>感謝觀看，有任何問題歡迎下方留言，就這樣掰掰。</p>]]></content>
    
    
    <categories>
      
      <category>Software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>GithubPage</tag>
      
      <tag>Hexo</tag>
      
      <tag>Vercel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日本軟銀金流API筆記</title>
    <link href="/2024/06/21/%E6%97%A5%E6%9C%AC%E8%BB%9F%E9%8A%80%E9%87%91%E6%B5%81API%E7%AD%86%E8%A8%98/"/>
    <url>/2024/06/21/%E6%97%A5%E6%9C%AC%E8%BB%9F%E9%8A%80%E9%87%91%E6%B5%81API%E7%AD%86%E8%A8%98/</url>
    
    <content type="html"><![CDATA[<p>這邊是之前整理的筆記，公司之前串接了軟銀金流，我這邊也一併協助了金流相關Domain的整理，之前接觸的金流大多是台灣的銀行或支付商的API模式，第一次看到海外的也覺得有點新鮮。對日本金流這塊有興趣的也可以看看</p><h2 id="課金方式-用戶收款模式"><a href="#課金方式-用戶收款模式" class="headerlink" title="課金方式(用戶收款模式)"></a><strong>課金方式(用戶收款模式)</strong></h2><ul><li>都度課金 &#x3D; 每次交易都從信用卡扣款</li><li>継続課金（簡易） &#x3D; 根據軟銀規定日扣除固定金額</li><li>継続課金（定期・従量） &#x3D; 根據特店指定日期與指定金額扣款</li></ul><h2 id="売上方式-請款模式"><a href="#売上方式-請款模式" class="headerlink" title="売上方式(請款模式)"></a><strong>売上方式(請款模式)</strong></h2><ul><li>自動売上方式 &gt; 自動請款</li><li>指定売上方式 &gt; 手動請款</li></ul><h2 id="与信と売上-授權與請款"><a href="#与信と売上-授權與請款" class="headerlink" title="与信と売上(授權與請款)"></a><strong>与信と売上(授權與請款)</strong></h2><h2 id="提供功能介紹"><a href="#提供功能介紹" class="headerlink" title="提供功能介紹"></a>提供功能介紹</h2><table><thead><tr><th><strong>提供機能名(功能)</strong></th><th><strong>説明</strong></th></tr></thead><tbody><tr><td>購入<br/>(付款)</td><td>購入商品の決済を行う機能です。指定売上の場合は、与信を取得する機能となり、売上機能の実施が必要です。<br/>(指付款，若手動請款模式需使用請款功能)</td></tr><tr><td>売上<br/>(請款)</td><td>指定売上の場合に、与信後の取引を全額請求する機能です。加盟店の任意のタイミングで使用します。売上を実施しないとエンドユーザーに利用代金は請求されず、加盟店への入金もされません。<br/>(手動請款時，將授權金額進行全額請款的功能，不請款不扣除消費者錢，特店也不會收到金流)</td></tr><tr><td>部分売上<br/>(部分請款)</td><td>指定売上の場合に、与信後の取引に対して、エンドユーザーへ請求したい金額を指定して請求する機能です。※請求金額は、与信取得金額の範囲内となります。<br/>(部分請款，只請部分款項，勿超過授權金額)</td></tr><tr><td>取消<br/>(取消授權)</td><td>指定売上の場合に、与信後の取引を取消する機能です。売上後の取引に対しては、返金を使用します。  <br/> (取消授權，若已請款，則需呼叫退款)</td></tr><tr><td>返金<br/>(退款)</td><td>売上後の取引を全額返金する機能です。売上前の取引に対しては、取消を使用します。<br/>(請款後的全額退款功能。)</td></tr><tr><td>部分返金<br/>(部分退款)</td><td>売上後の取引に対して、返金したい金額を指定して返金する機能です。1回のみ使用可能です。<br/>(部分退款功能，只能退款一次)</td></tr><tr><td>複数回返金<br/>(多次退款)</td><td>売上後の取引に対して、返金したい金額を指定して複数回返金ができる機能です。利用代金が0円になるまで複数回使用可能です。<br/>(多次退款功能，退到不能退為止)</td></tr><tr><td>金額変更<br/>(金額變更)</td><td>与信後または売上後の取引に対して、変更したい金額を指定して変更する機能です。※与信取得金額および売上金額の範囲を超えての変更も可能です。<br/>(授權後或請款後，希望變更金額，可以超過當初的授權&#x2F;請款額度)</td></tr><tr><td>再与信<br/>(再授權)</td><td>過去の決済情報を利用して、別の決済として与信を取得する機能です。与信期限内の売上ができない場合などに利用します。<br/>(利用前次的付款資訊，再次付款的功能，用於超出請款期限的情境)</td></tr><tr><td>決済結果参照<br/>(查詢付款結果)</td><td>決済のステータスを確認できる機能です。<br/>(查詢付款結果)</td></tr><tr><td>入金通知</td><td>エンドユーザーがオフラインで支払い（コンビニ払い、振込等）を済ませたことを加盟店へ通知する機能です。  <br/>(針對線下付款用戶已經付款完成時通知特店之功能。)</td></tr><tr><td>支払期限切れキャンセル通知</td><td>オフラインの支払い（コンビニ払い等）の期限が過ぎたため、取引がキャンセルになったことを加盟店へ通知する機能です。<br/>(針對線下付款用戶未能及時付款導致取消通知)</td></tr><tr><td>継続課金（簡易）解約</td><td>継続課金（簡易）の登録を解約する機能です。解約以後の課金は、行いません。</td></tr><tr><td>継続課金（簡易）解約通知</td><td>課金ができなかった取引を加盟店へ通知する機能です。解約通知以後の課金は、行いません。</td></tr><tr><td>継続課金（定期・従量）申込</td><td>継続課金（定期・従量）で提供する購入商品の申込みを行う機能です。継続課金（定期・従量）の登録のみで課金は行いません。</td></tr><tr><td>継続課金（定期・従量）再申込</td><td>継続課金（定期・従量）で登録した課金金額を変更する機能です。</td></tr><tr><td>継続課金（定期・従量）購入</td><td>継続課金（定期・従量）で提供する購入商品の決済を行う機能です。</td></tr><tr><td>継続課金（定期・従量）解約</td><td>継続課金（定期・従量）の登録を解約する機能です。</td></tr></tbody></table><h2 id="軟銀規範"><a href="#軟銀規範" class="headerlink" title="軟銀規範"></a>軟銀規範</h2><ul><li>當月請款交易，消費者會於次月月底支付</li><li>當月交易，次月請款，消費者會於次次月底支付</li><li>信用卡金流可以進行2次清算。</li><li>都度課金：消費者在每次利用服務都扣款</li><li>継続課金（簡易）：根據軟銀規範(月初)從消費者身上扣除固定金額 </li><li>継続課金（定期・従量：根據店家指定的日期與金額進行消費者的金額扣除 </li><li>在特店請款後10天收到收支報表，請款後的次月月底會收到款項。 </li><li>1~15日的請款，月底收到款項 </li><li>16日至月底的請款，隔月15日會收到款項</li></ul><p>針對都度課金:</p><ul><li>自動請款 不需要請款 </li><li>手動請款 45日以內可以請款 </li><li>自動請款 無法取消 </li><li>手動請款 45天以內可以取消 </li><li>退款期限 6個月 </li><li>再授權期限 6個月</li></ul><p>大約整理如上，有不懂的可以在問我。</p>]]></content>
    
    
    <categories>
      
      <category>Finance</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SoftBank</tag>
      
      <tag>Payment</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Optional API 紀錄</title>
    <link href="/2024/05/23/Java-Optional-API-%E7%B4%80%E9%8C%84/"/>
    <url>/2024/05/23/Java-Optional-API-%E7%B4%80%E9%8C%84/</url>
    
    <content type="html"><![CDATA[<p>之前我在寫Java時，總是覺得一直寫 if (obj !&#x3D; null) {} 這樣的處理會讓整體的程式碼變得不好看，我希望有一種API可以更好地協助我處理NLP問題，於是我後續就開始使用Optional這個套件<br>，覺得它挺好用的。它好用的點如下：</p><ul><li><p>提供兩種對Null的處理方式，使你更安全地操作你的變數。例如說：Optional.of() 與 Optional.ofNullable()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> Optional.ofNullable(object); <br><span class="hljs-type">boolean</span> <span class="hljs-variable">isExist</span> <span class="hljs-operator">=</span> object.isPresent(); <span class="hljs-comment">// Null 顯示為 false</span><br><span class="hljs-keyword">if</span>(isExist) &#123;<br>    System.out.println(<span class="hljs-string">&quot;String = &quot;</span> + object.get());<br>&#125;<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> Optional.of(object); <span class="hljs-comment">// 若Object為Null會立即爆錯</span><br></code></pre></td></tr></table></figure></li><li><p>支援Lambda function</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> Optional.ofNullable(object);<br>object.ifPresent(name -&gt; System.out.println(name.length()));<br></code></pre></td></tr></table></figure></li><li><p>例外處理可以賦值、執行Lambda、拋錯誤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 若InputName存在顯示InputName否則回傳orElse Value</span><br><span class="hljs-type">String</span> <span class="hljs-variable">inputName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Kevin&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Optional.ofNullable(inputName).orElse(<span class="hljs-string">&quot;John&quot;</span>); <br><br><span class="hljs-comment">// 如果為Null 可以使用orElse() 與 orElseGet() 處理Null問題</span><br><span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">defaultText</span> <span class="hljs-operator">=</span> Optional.ofNullable(text).orElseGet(<span class="hljs-built_in">this</span>::getMyDefault);<br><span class="hljs-type">String</span> <span class="hljs-variable">defaultText</span> <span class="hljs-operator">=</span> Optional.ofNullable(text).orElse(getMyDefault());<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMyDefault</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Default Value&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// 如果為null 拋出Exception</span><br><span class="hljs-type">String</span> <span class="hljs-variable">insertName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Kelvin&quot;</span>;<br>name = Optional.ofNullable(insertName).orElseThrow(IllegalArgumentException::<span class="hljs-keyword">new</span>);<br></code></pre></td></tr></table></figure></li><li><p>支援Java Stream API，提供更多資料處理的協助。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用filter可以篩選判斷</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> <span class="hljs-number">2016</span>;<br>Optional&lt;Integer&gt; yearOptional = Optional.of(year);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">is2016</span> <span class="hljs-operator">=</span> yearOptional.filter(y -&gt; y == <span class="hljs-number">2016</span>).isPresent();<br><br><span class="hljs-comment">// 可以使用 function進行值的檢測判斷</span><br><span class="hljs-type">Modem</span> <span class="hljs-variable">modem2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Modem</span>(<span class="hljs-number">13.10d</span>);<br>System.out.println(<span class="hljs-string">&quot;Result = &quot;</span> + priceIsInRange2(modem2));<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">priceIsInRange2</span><span class="hljs-params">(Modem modem2)</span> &#123;<br>    <span class="hljs-keyword">return</span> Optional.ofNullable(modem2)<br>            .map(Modem::getPrice).<br>            filter(p -&gt; p &gt;= <span class="hljs-number">10</span>).<br>            filter(p -&gt; p &lt;= <span class="hljs-number">15</span>).<br>            isPresent();<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Modem</span> &#123;<br>      <span class="hljs-keyword">private</span> Double price;<br><br>      Modem(Double price) &#123;<br>          <span class="hljs-built_in">this</span>.price = price;<br>      &#125;<br>      <span class="hljs-comment">// standard getters and setters</span><br><br>      <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrice</span><span class="hljs-params">(Double price)</span> &#123;<br>          <span class="hljs-built_in">this</span>.price = price;<br>      &#125;<br><br>      Double <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<br>          <span class="hljs-keyword">return</span> price;<br>      &#125;<br>&#125;<br><br><br><span class="hljs-comment">// 利用map進行映射，再用filter處理值</span><br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot; password &quot;</span>;<br>Optional&lt;String&gt; passOpt = Optional.of(password);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">correctPassword</span> <span class="hljs-operator">=</span> passOpt<br>.filter(pass -&gt; pass.equals(<span class="hljs-string">&quot;password&quot;</span>))<br>.isPresent();<br>assertFalse(correctPassword);<br>correctPassword = passOpt<br>.map(String::trim)<br>.filter(pass -&gt; pass.equals(<span class="hljs-string">&quot;password&quot;</span>))<br>.isPresent();<br>assertTrue(correctPassword);<br></code></pre></td></tr></table></figure></li><li><p>對Collection API的處理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用map 處理陣列</span><br>List&lt;String&gt; companyNames = Arrays.asList(<span class="hljs-string">&quot;paypal&quot;</span>, <span class="hljs-string">&quot;oracle&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;microsoft&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;apple&quot;</span>);<br>Optional&lt;List&lt;String&gt;&gt; listOptional = Optional.of(companyNames);<br><span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> listOptional.map(List::size).orElse(<span class="hljs-number">0</span>);<br>System.out.println(<span class="hljs-string">&quot;SIZE = &quot;</span> + size);<br><br><span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;john&quot;</span>, <span class="hljs-number">26</span>);<br>Optional&lt;Person&gt; personOptional = Optional.of(person);<br>Optional&lt;String&gt; nameOptional = personOptional<br>                                    .map(Person::getName)<br>                                    .orElseThrow(IllegalArgumentException::<span class="hljs-keyword">new</span>);<br>Optional&lt;String&gt; namesOptional = personOptional.flatMap(Person::getName);<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testflatMap</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    List&lt;Integer&gt; together = Stream.of(asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), asList(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)) <span class="hljs-comment">// Stream of List&lt;Integer&gt;</span><br>            .flatMap(List::stream)<br>            .map(integer -&gt; integer + <span class="hljs-number">1</span>)<br>            .collect(Collectors.toList());<br>    assertEquals(asList(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>), together);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = i;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Optional&lt;String&gt; <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Optional.ofNullable(name);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Optional&lt;Integer&gt; <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Optional.ofNullable(age);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Optional&lt;String&gt; <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Optional.ofNullable(password);<br>    &#125;<br><br>    <span class="hljs-comment">// normal constructors and setters</span><br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>更多參考</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//  取得第一個非null的值，Optional::get 是為了取得&lt;Stream&lt;String&gt;&gt;</span><br><span class="hljs-comment">//  方法會全數執行</span><br><span class="hljs-type">String</span> <span class="hljs-variable">found</span> <span class="hljs-operator">=</span> Stream.of(getEmpty(), getHello(), getBye())<br>        .filter(Optional::isPresent)<br>        .map(Optional::get)<br>        .findFirst()<br>        .get();<br><br><span class="hljs-comment">//  同樣意思，但方法不會全數執行</span><br>Optional&lt;String&gt; found2 =<br>      Stream.&lt;Supplier&lt;Optional&lt;String&gt;&gt;&gt;of(<span class="hljs-built_in">this</span>::getEmpty, <span class="hljs-built_in">this</span>::getHello, <span class="hljs-built_in">this</span>::getBye)<br>              .map(Supplier::get)<br>              .filter(Optional::isPresent)<br>              .map(Optional::get)<br>              .findFirst();<br><br><span class="hljs-comment">// 若function想要帶上參數 需使用lambda</span><br>Optional&lt;String&gt; found3 = Stream.&lt;Supplier&lt;Optional&lt;String&gt;&gt;&gt;of(<br>              () -&gt; createOptional(<span class="hljs-string">&quot;empty&quot;</span>),<br>              () -&gt; createOptional(<span class="hljs-string">&quot;hello&quot;</span>)<br>      )<br>      .map(Supplier::get)<br>      .filter(Optional::isPresent)<br>      .map(Optional::get)<br>      .findFirst();<br><br><span class="hljs-comment">//        判斷是否全數為null</span><br><span class="hljs-type">String</span> <span class="hljs-variable">found4</span> <span class="hljs-operator">=</span> Stream.&lt;Supplier&lt;Optional&lt;String&gt;&gt;&gt;of(<br>                () -&gt; createOptional(<span class="hljs-string">&quot;empty&quot;</span>),<br>                () -&gt; createOptional(<span class="hljs-string">&quot;E&quot;</span>)<br>        )<br>        .map(Supplier::get)<br>        .filter(Optional::isPresent)<br>        .map(Optional::get)<br>        .findFirst()<br>        .orElseGet(() -&gt; <span class="hljs-string">&quot;default&quot;</span>);<br><br>assertEquals(<span class="hljs-string">&quot;E&quot;</span>,found4);<br><br><span class="hljs-keyword">private</span> Optional&lt;String&gt; <span class="hljs-title function_">getEmpty</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> Optional.empty();<br>&#125;<br><br><span class="hljs-keyword">private</span> Optional&lt;String&gt; <span class="hljs-title function_">getHello</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Optional.of(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">private</span> Optional&lt;String&gt; <span class="hljs-title function_">getBye</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Optional.of(<span class="hljs-string">&quot;bye&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">private</span> Optional&lt;String&gt; <span class="hljs-title function_">createOptional</span><span class="hljs-params">(String input)</span> &#123;<br>    <span class="hljs-keyword">if</span> (input == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(input) || <span class="hljs-string">&quot;empty&quot;</span>.equals(input)) &#123;<br>        <span class="hljs-keyword">return</span> Optional.empty();<br>    &#125;<br>    <span class="hljs-keyword">return</span> Optional.of(input);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Optional</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
